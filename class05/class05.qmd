---
title: "Class 5: Data Visualization"
author: "Eduardo"
format: gfm
---

# Plotting in R

R has multiple plotting and graphics systems. The most popular of which is **ggplot2**.

We has already played with "base" R graphics. This comes along with R "out of the box"

```{r}
plot(cars)
```

Compared to base R plots, ggplot is much more verbose - I need to write more code to get simple plots like the one above

To use ggplot, I need to first install the ggplot2 package. To install any package in R, I use the `intsall.packages()` command along with the package name.

The Install is a one time only requirement. The package is now on our computer. I don't need to re-install it.

However, I can't just use it without loading it up with a `library()` call.

```{r}
library(ggplot2)
```

```{r}
ggplot(cars)
```

All ggplot figures need at least 3 things:

-   data (this is the data.frame with our number and stuff)
-   aesthetics ("aes", how our data maps to the plot)
-   geoms (do we want lines, points, columns, etc...)

```{r}
ggplot(data = cars) + aes(x = speed, y = dist) + geom_point()
```

I want a trend line to show the relationship between speed and stopping distance

```{r}
ggplot(data = cars) + aes(x = speed, y = dist) + geom_point() + geom_line()
```

This is not what we want

```{r}
ggplot(data = cars) + aes(x = speed, y = dist) + geom_point() + geom_smooth()
```

To add a straight trend line use:

```{r}
ggplot(data = cars) + aes(x = speed, y = dist) + geom_point() + geom_smooth(method = "lm", se=FALSE) 
```

To store a plot and use it to edit u can use a variable

```{r}
bb <- ggplot(data = cars) + aes(x = speed, y = dist) + geom_point() + geom_smooth(method = "lm", se=FALSE)
```

Now add labels using labs() and make it black and white using theme_bw()

```{r}
bb + labs(title="Speed and Stopping Distances of Cars",
       x="Speed (MPH)", 
       y="Stopping Distance (ft)",
       subtitle = "Your informative subtitle text here",
       caption="Dataset: 'cars'") + theme_bw()
```

Anti- Viral drug example

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
```

head(dataset) function will print the first few rows (6 by default) of the data set

Find total number of genes (rows)

```{r}
nrow(genes)
```

Find names of columns

```{r}
colnames(genes)
```

Find number of columns

```{r}
ncol(genes)
```

Summary of the "State" column

```{r}
table(genes[,"State"])
```

Fraction of genes up-regulated

```{r}
127/5196
```

Round it up to 2 sig figs and percent using round()

```{r}
round( table(genes$State)/nrow(genes) * 100, 2 )
```

Graph the gene data as a scatterplot!

```{r}
ggplot(genes)+ aes(x=Condition1, y=Condition2, color=State) + geom_point()
```

Make it easier to edit by storing plot in variable

```{r}
p <- ggplot(genes) + 
    aes(x=Condition1, y=Condition2, col=State) +
    geom_point()
p
```

Add our own colors

```{r}
p + scale_colour_manual( values=c("blue","gray","red") )
```

Add labels!

```{r}
p + scale_colour_manual(values=c("blue","gray","red")) +
    labs(title="Gene Expresion Changes Upon Drug Treatment",
         x="Control (no drug) ",
         y="Drug Treatment")
```

Going Further Section:

```{r}
# File location online
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"
library(dplyr)
gapminder <- read.delim(url)
gapminder_2007 <- gapminder %>% filter(year==2007)
head(gapminder_2007)
```
Life expectancy plot from data
```{r}
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp) +
  geom_point()
```
Making it clearer by changing the transparency 
```{r}
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp) +
  geom_point(alpha=0.5)
```

Adding more variables
```{r}
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp, color=continent, size=pop) +
  geom_point(alpha=0.5)
```

```{r}
ggplot(gapminder_2007) + 
  aes(x = gdpPercap, y = lifeExp, color = pop) +

geom_point(alpha=0.8)
```

```{r}
ggplot(gapminder_2007) + 
  aes(x = gdpPercap, y = lifeExp, size = pop) +
  geom_point(alpha=0.5)
```

```{r}
ggplot(gapminder_2007) + 
  geom_point(aes(x = gdpPercap, y = lifeExp,
                 size = pop), alpha=0.5) + 
  scale_size_area(max_size = 10)
```

```{r}
gapminder_1957 <- gapminder %>% filter(year==1957)

ggplot(gapminder_1957) + 
  aes(x = gdpPercap, y = lifeExp, color=continent,
                 size = pop) +
  geom_point(alpha=0.7) + 
  scale_size_area(max_size = 10) 
```

```{r}
gapminder_1957 <- gapminder %>% filter(year==1957 | year==2007)

ggplot(gapminder_1957) + 
  geom_point(aes(x = gdpPercap, y = lifeExp, color=continent,
                 size = pop), alpha=0.7) + 
  scale_size_area(max_size = 10) +
  facet_wrap(~year)
```


